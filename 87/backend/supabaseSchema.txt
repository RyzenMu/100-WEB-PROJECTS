-- Supabase SQL Schema for LinkedIn Clone
-- Create the linkedin_user table with all necessary fields

-- Enable Row Level Security
CREATE TABLE IF NOT EXISTS public.linkedin_user (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    username TEXT UNIQUE NOT NULL,
    email TEXT UNIQUE NOT NULL,
    password_hash TEXT,
    first_name TEXT,
    last_name TEXT,
    profile_picture_url TEXT,
    bio TEXT,
    location TEXT,
    skills TEXT[],
    experience_years INTEGER DEFAULT 0,
    github_url TEXT,
    linkedin_url TEXT,
    portfolio_url TEXT,
    oauth_provider TEXT, -- 'google', 'facebook', or null for email/password
    oauth_id TEXT,
    is_email_verified BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create jobs table for storing job postings
CREATE TABLE IF NOT EXISTS public.jobs (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    company_name TEXT NOT NULL,
    role_title TEXT NOT NULL,
    description TEXT,
    experience_required TEXT NOT NULL,
    salary_range TEXT NOT NULL,
    location TEXT NOT NULL,
    required_skills TEXT[] NOT NULL,
    job_type TEXT DEFAULT 'Full-time', -- 'Full-time', 'Part-time', 'Contract', 'Internship'
    remote_friendly BOOLEAN DEFAULT FALSE,
    application_deadline DATE,
    posted_by UUID REFERENCES public.linkedin_user(id),
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create job applications table
CREATE TABLE IF NOT EXISTS public.job_applications (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    job_id UUID REFERENCES public.jobs(id) ON DELETE CASCADE,
    user_id UUID REFERENCES public.linkedin_user(id) ON DELETE CASCADE,
    status TEXT DEFAULT 'applied', -- 'applied', 'reviewing', 'shortlisted', 'rejected', 'hired'
    cover_letter TEXT,
    resume_url TEXT,
    applied_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(job_id, user_id) -- Prevent duplicate applications
);

-- Create user sessions table for authentication
CREATE TABLE IF NOT EXISTS public.user_sessions (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID REFERENCES public.linkedin_user(id) ON DELETE CASCADE,
    session_token TEXT UNIQUE NOT NULL,
    expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Enable Row Level Security (RLS)
ALTER TABLE public.linkedin_user ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.jobs ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.job_applications ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_sessions ENABLE ROW LEVEL SECURITY;

-- RLS Policies for linkedin_user table
-- Users can read their own profile
CREATE POLICY "Users can view own profile" ON public.linkedin_user
    FOR SELECT USING (auth.uid() = id);

-- Users can update their own profile
CREATE POLICY "Users can update own profile" ON public.linkedin_user
    FOR UPDATE USING (auth.uid() = id);

-- Allow public registration
CREATE POLICY "Enable insert for authentication" ON public.linkedin_user
    FOR INSERT WITH CHECK (true);

-- Allow public read for user profiles (for job applications, etc.)
CREATE POLICY "Public profiles are viewable by everyone" ON public.linkedin_user
    FOR SELECT USING (true);

-- RLS Policies for jobs table
-- Everyone can view active jobs
CREATE POLICY "Anyone can view active jobs" ON public.jobs
    FOR SELECT USING (is_active = true);

-- Authenticated users can create jobs
CREATE POLICY "Authenticated users can create jobs" ON public.jobs
    FOR INSERT WITH CHECK (auth.role() = 'authenticated');

-- Job posters can update their own jobs
CREATE POLICY "Users can update own jobs" ON public.jobs
    FOR UPDATE USING (auth.uid() = posted_by);

-- RLS Policies for job_applications table
-- Users can view their own applications
CREATE POLICY "Users can view own applications" ON public.job_applications
    FOR SELECT USING (auth.uid() = user_id);

-- Users can create applications
CREATE POLICY "Users can create applications" ON public.job_applications
    FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Users can update their own applications
CREATE POLICY "Users can update own applications" ON public.job_applications
    FOR UPDATE USING (auth.uid() = user_id);

-- Job posters can view applications for their jobs
CREATE POLICY "Job posters can view applications" ON public.job_applications
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM public.jobs 
            WHERE jobs.id = job_applications.job_id 
            AND jobs.posted_by = auth.uid()
        )
    );

-- Insert sample jobs data
INSERT INTO public.jobs (company_name, role_title, description, experience_required, salary_range, location, required_skills, job_type, remote_friendly) VALUES 
('TechCorp Solutions', 'Full Stack Developer', 'Build scalable web applications using modern technologies', '2-4 years', '₹8-12 LPA', 'Bangalore', ARRAY['React', 'Node.js', 'TypeScript', 'MongoDB', 'Express'], 'Full-time', true),
('DataFlow Systems', 'Frontend Developer', 'Create beautiful and responsive user interfaces', '1-3 years', '₹6-10 LPA', 'Mumbai', ARRAY['HTML', 'CSS', 'JavaScript', 'React', 'Tailwind CSS'], 'Full-time', false),
('CloudTech Innovations', 'Backend Developer', 'Design and implement robust server-side applications', '3-5 years', '₹10-15 LPA', 'Hyderabad', ARRAY['Python', 'Django', 'PostgreSQL', 'Redis', 'Docker'], 'Full-time', true),
('WebCraft Studios', 'React Developer', 'Develop interactive web applications with React ecosystem', '2-4 years', '₹7-11 LPA', 'Pune', ARRAY['React', 'JavaScript', 'CSS', 'Supabase', 'Git'], 'Full-time', false),
('DevOps Masters', 'DevOps Engineer', 'Manage cloud infrastructure and deployment pipelines', '4-6 years', '₹12-18 LPA', 'Delhi', ARRAY['Docker', 'Kubernetes', 'AWS', 'Jenkins', 'Python'], 'Full-time', true),
('Mobile First Tech', 'Full Stack Engineer', 'Work on both frontend and backend systems', '3-5 years', '₹9-14 LPA', 'Chennai', ARRAY['Node.js', 'Express', 'React', 'MongoDB', 'GraphQL'], 'Full-time', false),
('AI Solutions Hub', 'Software Developer', 'Build enterprise software solutions', '1-2 years', '₹5-8 LPA', 'Bangalore', ARRAY['Java', 'Spring Boot', 'MySQL', 'REST APIs', 'Git'], 'Full-time', true),
('Frontend Experts', 'UI/UX Developer', 'Create engaging user experiences and interfaces', '2-3 years', '₹6-9 LPA', 'Noida', ARRAY['HTML', 'CSS', 'JavaScript', 'Figma', 'React'], 'Full-time', false),
('Database Dynamics', 'Database Developer', 'Design and optimize database systems', '4-7 years', '₹11-16 LPA', 'Kolkata', ARRAY['PostgreSQL', 'MySQL', 'Python', 'ETL', 'SQL'], 'Full-time', true),
('Startup Accelerator', 'Junior Developer', 'Learn and grow in a fast-paced startup environment', '0-2 years', '₹4-7 LPA', 'Gurgaon', ARRAY['JavaScript', 'HTML', 'CSS', 'Node.js', 'MongoDB'], 'Full-time', false);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_linkedin_user_email ON public.linkedin_user(email);
CREATE INDEX IF NOT EXISTS idx_linkedin_user_username ON public.linkedin_user(username);
CREATE INDEX IF NOT EXISTS idx_jobs_company_role ON public.jobs(company_name, role_title);
CREATE INDEX IF NOT EXISTS idx_jobs_skills ON public.jobs USING GIN(required_skills);
CREATE INDEX IF NOT EXISTS idx_jobs_location ON public.jobs(location);
CREATE INDEX IF NOT EXISTS idx_jobs_active ON public.jobs(is_active);
CREATE INDEX IF NOT EXISTS idx_job_applications_user ON public.job_applications(user_id);
CREATE INDEX IF NOT EXISTS idx_job_applications_job ON public.job_applications(job_id);

-- Create updated_at trigger function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create triggers for updated_at
CREATE TRIGGER update_linkedin_user_updated_at BEFORE UPDATE ON public.linkedin_user 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_jobs_updated_at BEFORE UPDATE ON public.jobs 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_job_applications_updated_at BEFORE UPDATE ON public.job_applications 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();